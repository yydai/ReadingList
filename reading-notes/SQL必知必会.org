* SQL 必知必会 (Sams Teach Yourself SQL in 10 minutes)

** 第一节 了解 SQL
    这一部分介绍数据库的基本知识。

*** 1.1 数据库的基础

**** 数据库
    数据库是某种有组织的方式存储的数据集合。最简单的办法是将它想象成一个文件柜。

**** 表
    表是一种结构化的文件，可以用来存储某种特定类型的数据。其中，对于每一个数据库表名是唯一的。

**** 列和数据类型
    列（column）表中的一个字段。

    数据类型在每一个 DBMS 不尽相同，在使用时要查阅相应的文档。

**** 行
    行（row）表中的一个记录。如果你经常听说提到行时称其为记录。从技术上来说，行才是正确的。

**** 主键
    表中的每一行都应有一列（或几列）可以唯一的标识自己。

    我们应该总是定义主键，可以保证以后方便操作和管理。

*** 1.2 什么是 SQL
    SQL 是 Structured Query Language（结构化查询语言）的缩写，是一种专门和数据库沟通的语言。

** 第二节 检索数据
    这一部分学习 SELECT 语句。

*** 2.1 SELECT 语句
    为了使用 SELECT 语句，必须至少给出两条数据--想选择什么，在什么地方选择。

*** 2.1 检索单个列
    #+BEGIN_SRC sql
    SELECT prod_name
    FROM Products;
    #+END_SRC

    提示：多条语句结束要以分好分隔。SQL 语句不区分大小写。许多的开发人
    员喜欢对 SQL 关键字使用大写，而对列明和表名使用小写，这样便于阅读
    和调试。

    使用空格：在处理 SQL 语句时，其中所有的空格都会被忽略。 SQL 可以写成一行也可以在多行写，但写多行更容易阅读。

*** 2.3 检索多个列
    #+BEGIN_SRC sql
    SELECT prod_id, prod_name
    FROM Products;
    #+END_SRC

*** 2.4 检索所有的列

    如果给定一个通配符 *， 会返回表中所有列。

    #+BEGIN_SRC sql
    SELECT *
    FROM Products;
    #+END_SRC

    但是，如果不需要所有的列，你不应该使用 * ， 这会降低查询的性能。

*** 2.5 检索不同的值
    这里会使用到关键字 =DISTINCT= ，例如下面

    #+BEGIN_SRC sql
    SELECT DISTINCT vend_id
    FROM Products;
    #+END_SRC

    如果有多个相同的结果出现，只会显示不同的结果。

    注意这里的 DISTINCT 作用于所有的列，而不仅仅跟在其后的一列。

*** 限制结果
    如果你只想返回第一行或者一定数量的行，怎么办呢？不同的数据库有不同的方法。
    如果你使用的是 MySQL，MariaDB， PostgreSQL 或者 SQLite， 需要使用 LIMIT。

    #+BEGIN_SRC sql
    SELECT prod_name
    FROM Products
    LIMIT 5;
    #+END_SRC

    返回不超过5行的数据。

    为了得到后面的5行数据，我们需要指定从什么地方开始。这里会用到 OFFSET。

    #+BEGIN_SRC sql
    SELECT prod_name
    FROM Products
    LIMIT 5 OFFSET 5;
    #+END_SRC

    注意：第0行。第一个被检索的行是第0行。因此 LIMIT 1 OFFSET 1，会检索第2行，而不是第1行。

    其中，MySQL，MariaDB 和 SQLite 支持简化版的这种操作。对 =LIMIT 4 OFFSET 3= , 可以 =LIMIT 3, 4= 。

*** 使用注释

    #+BEGIN_SRC sql
    -- 这是注释
    /* 这也是注释 */
    #+END_SRC

** 第三课 排序检索数据
    这一部分介绍 =ORDER BY= 子句。

*** 排序数据
    例子：
    #+BEGIN_SRC sql
    SELECT prod_name
    FROM Products
    ORDER BY prod_name ;
    #+END_SRC

    这里的 prod_name 列以字母顺序排序。

    有一条非常关键的要求，在指定一条 =ORDER BY= 子句是，应该保证它是 =SELECT= 语句中最后的子句。

*** 按多个列排序

    ORDER BY 后跟多个列

*** 按位置排序
    ORDER BY 还可以按照相对位置排序。

    #+BEGIN_SRC sql
    SELECT prod_id, prod_price, prod_name
    FROM Products
    ORDER BY 2, 3;
    #+END_SRC

    如果有必要，可以混合使用实际列名和相对位置。

*** 指明排序的方向

    降序排序主要用 DESC，这个是 DESCENDING 的简写，这两个关键字都可以使用。DESC 只能应用到直接位于其前面的列名。

    #+BEGIN_SRC sql
    SELECT prod_id
    FROM Products
    ORDER BY prod_price DESC, prod_name ;
    #+END_SRC

    ASC 是与其相对的一个，但用的很少。因为默认就是升序排列的。

** 第四课 过滤数据

    这部分介绍 WHERE 的使用。

*** 使用 WHERE 子句
    #+BEGIN_SRC sql
    select prod_name, prod_price
    from Products
    where prod_price = 3.49;
    #+END_SRC

    如果 where 和 order by 同时使用，注意把 order by 放到最后。

*** WHERE  子句操作符

	不同的 DBMS 支持的不同，可以看具体的文档。

    | 操作符  | 说明         |
    |---------+--------------|
    | =       | 等于         |
    | BETWEEN | 在指定的值间 |
    | IS NULL | 为 NULL 值     |


	#+BEGIN_SRC sql
	select vend_id, prod_name
	from Products
	where vend_id <> 'DLL01';
	#+END_SRC

	单引号用来限定字符串，不能用来和数值比较。

**** 范围检查
	使用 BETWEEN 需要两个值，即范围的开始和结束。

	#+BEGIN_SRC sql
	SELECT prod_name, prod_price
	FROM Products
	WHERE prod_price BETWEEN 5 AND 10;
	#+END_SRC

**** 空值检查
	确定值是否为 NULL，不能简单的使用 =NULL。

	#+BEGIN_SRC sql
	select prod_name
	from Products
	where prod_price is null;
	#+END_SRC

** 第五课 高级数据过滤

*** 组合 WHERE 子句
	SQL 允许出现多个 where 子句，他们之间通过 AND 或者 OR 来连接。

*** AND OR
	需要注意的是 AND OR 的求值顺序。

	#+BEGIN_SRC sql
	select prod_name, prod_price
	from Products
	where vend_id = '' or vend_id = ''
		  and prod_price >= 10;
	#+END_SRC

	SQL 在处理 OR 之前，优先处理 AND。所以必要的时候，我们要加上括号明确地使用分组操作符。

*** IN 操作符

	IN 用来指定条件范围，范围中的每个条件都可以进行匹配。
	#+BEGIN_SRC sql
	select prod_name, prod_price
	from Products
	where vend_id in ('', '')
	order by prod_name ;
	#+END_SRC

	这里我们可以看出，in 与 or 差不多。使用 or 有如下的优点。
	- 更加的清晰、直观
    - 运行的更快
    - 可以包含其他的 SELECT 语句。这个非常有用。

*** NOT 操作符
	where 子句中用来否定其后条件的关键字。

** 第六节 用通配符进行过滤
	这部分介绍 like 的用法。

*** like 操作符
	通配符搜索只能用于文本字段（字符串），非文本字段不能使用通配符。

*** 百分号（%） 通配符
	% 表示任何字符出现任意次数。为了找出所有以 Fish 开头的产品，可以
	#+BEGIN_SRC sql
	select prod_id, prod_name
	from Products
	where prod_name like 'Fish%';
	#+END_SRC

	这地方可能会有很多的坑，例如匹配 F%y, 以 F 开头， y结尾的。如果y后
	面还有空格就匹配不到了，这不是我们想要的。这个时候，解决办法可以这
	样 F%y% 来匹配。更好的办法是用函数去掉空格。

	% 看起来能匹配任何的东西，但是有一个例外，这就是 =NULL= 。

*** 下划线（_） 通配符
	它只能匹配单个字符。

*** 使用通配符的技巧
	- 不要过度使用通配符。如果其他操作能达到相同的目的，应该使用其他操作。
    - 不要把它们用在搜索模式的开始处。这样是最慢的。



