* Writing GNU Emacs Extensions

** Chapter 1, Customizing Emacs
   This chapter introduces basic Emacs customizations, and teaches some Emacs Lisp along the way. 

*** Fully-parenthesized prefix notation
    All expressions and function calls in Lisp are surrounded by parentheses.
    "Prefix notation" means that the operator precedes the operands. When the
    operator is between the operands, it's called "infix notation."

*** Garbage collection
    Lisp is a garbage-collected language, which means that Lisp itself
    automatically reclaims the memory used by your program's data structures.

*** Binding Keystrokes to Commands
    The function global-set-key takes two arguments: the keysequence to bind,
    and the command to bind it to. 

    =(global-set-key keysequence command)= ==> =(global-set-key "\M-?" command)=

*** Evaluating Lisp Expressions
    There are several ways to explicitly evaluate Lisp expressions.
    1. put the lisp expressions in a file, and then load the file to emacs.
       You can use the command like this:

       =M-x load-file RET <file-name> RET=

    2. use the command: =eval-last-sexp=, which bound to the C-x C-e

    3. use the *scratch* buffer

*** Apropos
    Before wrapping up this first example, let's discuss Emacs's most important
    online help facility, apropos.
    
** Chapter 2, Simple New Commands
   In this chapter we'll develop several very small Lisp functions and commands.

*** Traversing Windows
    =C-x o= bound to the function of =other-window= ,moves the cursor from one
    Emacs window into the next. So I chose C-x C-n for "next window" and C-x C-p
    for "previous window."
   
    =(global-set-key "\C-x\C-n" 'other-window)=
    
    Defining a function called other-window-backward

    #+BEGIN_SRC lisp
    (defun other-window-backward ( )
      "Select the previous window."
      (interactive)
      (other-window -1))
    #+END_SRC

    =(global-set-key "\C-x\C-p" 'other-window-backward)=

*** Parameterizing Other-window Backward
    This keybinding does what we need, but we can improve on it a bit. Now, we
    will a parameter of n to the function. If we want to pass a parameter to it,
    we can use =C-u <parameter> C-x C-n=. For example, C-u 2 C-x C-n means "move
    to the second window following this one."
    
    #+BEGIN_SRC lisp
    (defun other-window-backward(n)
      "Select Nth previous window."
      (interactive "p")
      (other-window (- n)))
    #+END_SRC

    An =interactive= command is a kind of Lisp function. That means that the
    command may take arguments. Passing arguments to a function from lisp is
    easy. but what if the function is invoked as an interactive command? Where
    do the arguments come from then? Answering this question is the purpose of
    the =interactive= declaration. The code letter ="p"= used in this example
    means, "if there is a prefix argument, interpret it as a number, and if
    there is no prefix argument, interpret that as the number 1."

*** Making the Argument Optional
    #+BEGIN_SRC lisp
     (defun other-window-backward (&optional n)
       "Select Nth previous window."
       (interactive "p")
       (if n
       (other-window (- n)) ;if n is non-nil
       (other-window -1))) ;if n is nil

    #+END_SRC

    The keyword &optional appearing in a parameter list means that all
    subsequent parameters are optional.
    
    we can rewriten the exp to this:
    =(other-window (if n (- n) -1))=, and more better is this:
    =(other-window (- (if n n 1)))=

*** Logical Expressions   
     An old Lisp programmers' trick can now be used to make this expression even
     more concise:
     =(if n n 1)= == =(or n 1)=
     
     Lisp's =or= has an extra bit of usefulness: it evaluates each of its
     arguments in order until it finds one that's non-nil, then it returns that
     value. If it doesn't find one, it returns =nil=.

     #+BEGIN_SRC lisp
       (if a a                                 ;; if a is true, return a
         (if b b                               ;; else if b is true, return b
           ...
             (if y y z)))                      ;; else if y is true, return y, else z
     #+END_SRC
     can be changed to the following form.
     #+BEGIN_SRC lisp
     (or a b ... y z)
     #+END_SRC

     Similarly,
     #+BEGIN_SRC lisp
     (if a
       (if b
         ...
           (if y z)))
     #+END_SRC
     can be also written as
     #+BEGIN_SRC lisp
     (and a b ... y z)
     #+END_SRC
     also:
     =(if (and a b ... y) z)= == =(and a b ... y z)=, but the first one is more better to read for human.

*** The better other-window-backward
    #+BEGIN_SRC lisp
     (defun other-window-backward (&optional n)
       "Select Nth previous window."
       (interactive "p")
       (other-window (- (or n 1)))
    #+END_SRC

    But the best definition of all-the most Emacs-Lisp like-turns out to be:

    #+BEGIN_SRC lisp
    (defun other-window-backward (&optional n)
      "Select Nth previous window."
      (interactive "P")
      (other-window (- (prefix-numberic-value n))))
    #+END_SRC

    where =prefix-numberic-value= is a build-in function.

    You should notice the ="P"= instead of ="p" in previoud version. The capital
    P means "when called interactively, leave the prefix argument in raw form
    and assign it to n." Where =prefix-numberic-value= is a build-in function.

*** Other Cursor and Text Motion Commands
    Here are a few more easy commands with their suggested keybindings.

    #+BEGIN_SRC lisp
    (defun point-to-top()
      "Put point on top line of window."
      (interactive)
      (move-to-window-line 0))

    (global-set-key "\M-," 'point-to-top)

    (global-set-key "\C-x," 'tags-loop-continue)
    #+END_SRC

    The next function makes the cursor jump to the bottom left of the window it's in.
    #+BEGIN_SRC lisp
    (defun point-to-bottom()
      "Put point at the beginning of last visible line."
      (interactive)
      (move-to-window-line -1))

    (global-set-key "M-." 'point-to-bottom)
    #+END_SRC

    This command scrolls the window so that whichever line the cursor is one
    becomes the top line in the window. The keybinding replaces =shell-command=

    #+BEGIN_SRC lisp
    (defun line-to-top()
      "Move current line to top of window."
      (interactive)
      (recenter 0))
    (global-set-key "\M-!" 'line-to-top)
    #+END_SRC
    
*** Clobbering Symbolic Links
   So far, the function we've written have been very simple. Let's look at an example now where more programming is required.

   In UNIX, a symbolic link, or symlink, is a file that refers to another file
   by name. When you ask for the contens of a symlink, you actually get the
   contents of the real file named by the symlink.

   Suppose you visit a file in Emacs that is really a symlink to some other
   file. You make some changes and Press =C-x C-s= to save the buffer. What
   should Emacs do?
    1. Replace the symbolic link with the edited version of the file, breaking the link but leaving the original link target alone.
    2. Overwrite the file pointed to by the symbolic link.
    3. Prompt you to choose one of the above actions.
    4. Something else altoge

   Here's what I do: when I visit a file that's really a symlink, I have Emacs
   automatically make the buffer read-only. This causes a "Buffer is read-only"
   error as soon as I try to change anything in the buffer. Then I choose how to
   proceed using one of two special commands I've designed.

*** Hooks
    For Emacs to make the buffer read-only when I first visit the file, I have
    to somehow tell Emacs, "execute a certern piece of Lisp code whenever I
    visit a file." The action of visiting a file should trigger a function I
    write. This is where hooks come in.

    The function =add-hook= adds a function to a hook variable. Here's a function to add to =find-file-hooks=:
    #+BEGIN_SRC lisp
    (defun read-only-if-symlink()
      (if (file-symlink-p buffer-file-name)
          (progn
            (setq buffer-read-only t)
            (message "File is a symlink"))))
    #+END_SRC
    
    This function tests whether current buffer's file is symlink.
    - The function =file-symlink-p= tests whether its argument, which is a string naming a file, refers to a symbolic link.
    - If =buffer-file-name= does refer to a symlink, there are two things we want to do:
      make the buffer read-only, and display a message.
    - A =progn= expression evaluates each of its subexpressions in order and returns the value of the last one.

    Now that we've defined =read-only-if-symlink=, we can call

    #+BEGIN_SRC lisp
    (add-hook 'find-file-hooks 'read-only-if-symlink)
    #+END_SRC
    to add it to the list of functions that are called whenever a new file is visited.

*** Anonymous Functions

    If the function won't ever be called from anywhere else, the better way is
    to define a function without giving it a name. Such functions are known as 
    anonymous functions.
    #+BEGIN_SRC lisp
    (lambda ()
        (if (file-symlink-p buffer-file-name)
            (progn
               (setq buffer-read-only t)
               (message "File is a symlink"))))
    #+END_SRC
    so:
    #+BEGIN_SRC lisp
    (add-hook 'find-file-hooks
      '(lambda ()
        (if (file-symlink-p buffer-file-name)
            (progn
               (setq buffer-read-only t)
               (message "File is a symlink")))))
    #+END_SRC
    
    Now only find-file-hooks has access to the function; on other code is able to call it.

    There's one reason not to use anonymous functions in hooks. IF you ever wish to remove a function from a hook,
    you need to refer to it by name in a call to remove-hook, like so:

    #+BEGIN_SRC lisp
       (remove-hook 'find-file-hooks 'read-only-if-symlink)
    #+END_SRC
*** Handing the symlink
    When Emacs alerts me that I'm editing a symlink, I may wish to replace the
    buffer with one visiting the target of the link instead; or I may wish to
    "clobber" the symlink and visit that.

    #+BEGIN_SRC lisp
    (defun visit-target-instead()
      "Replace this buffer with a buffer visiting the link target."
      (interactive)
      (if buffer-file-name
          (let ((target (file-symlink-p buffer-file-name)))
            (if target
                (find-alternate-file target)
                (error "Not visiting a symlink")))
          (error "Not visiting a file")))

     (defun clobber-symlink()
        "Replace symlink with a copy of the file."
        (interactive)
        (if buffer-file-name
            (let ((target (file-symlink-p buffer-file-name)))
            (if target
                (if (yes-or-no-p (format "Replace %s with %s?"
                                         buffer-file-name
                                         target))
                    (progn
                    (delete-file buffer-file-name)
                    (write-file buffer-file-name)))
                 (error "Not visiting a file")))
    #+END_SRC



    To be continue...(P35)
*** Temporary variables
    In elisp, temporary variables are created with =let=, whose syntax is:
    #+BEGIN_SRC lisp
    (let ((var1 value1)
          (var2 value2)
          ...
          (varn valuen))
     body1 body2 ...bodyn)
    #+END_SRC
    
** Chapter 3, Cooperating Commands
   This chapter shows how to get different commands to work together by saving
   information in one command and retrieving it in another.
*** The Symptom
    When you do some commands like scroll-down and scroll-up, maybe you will
    lose the cursor point before.

*** Declaring Variables    
    We'll start by setting up a global variable, =unscroll-to=, which will hold
    the "undo" information, which is simply the position in the buffer to which
    unscroll should move the cursor.

    #+BEGIN_SRC lisp
    (defvar unscroll-to nil
       "Text position for next call to 'unscroll'.")
    #+END_SRC

    - Using =defvar= allows a docstring to be associated with the variable, in
      the same way that =defun= allows a docstring to be associated with a
      function. =defvar= is different from setting a variable's value with =setq=.
      =defvar= assigns the value only if the variable does not yet have any value.
    - A variable declaration using =defvar= can be found by the various
      =tag-related= commands. Emacs's tag facilities, such as the =find-tag=
      command, can find anything created with the def ... function(defun,
      defalias, defmacro, defsubst, defconst, defadvice)

*** Saving and Restoring Point     
    #+BEGIN_SRC lisp
    (defadvice scroll-up (before remember-for-unscroll
                          activate compile)
                          "Remeber where we started from, for 'unscroll'."

    (if (not (eq last-command 'scroll-up))
         (setq unscroll-to (point))))

    #+END_SRC

    #+BEGIN_SRC lisp
    (defun unscroll ()
       "Jump to location specified by 'unscroll-to'."
       (interactive)
       (goto-char unscroll-to))
    #+END_SRC

    The function goto-char moves the cursor to the given position.

*** Window Appearace
    Since our goal is to minimize the disruption caused by unintended scrolling,
    we'd really like to restore not only the location of the cursor, but also
    the appearace of the window with respect to which lines ares visible where.

    Saving the value of point is no longer sufficient, therefore. We must also save a
    value representing what's visible in the current window. Emacs's provides several
    functions describing what's visible in a window, such as =window-edges=,
    =window-height=, and =current-window-configuration=. For now we'll only use
    =window-start=. 


** Chapter 4, Searching and Modifying Buffers
   There will be lots of times when you want to search through a buffer for a
   string, perhaps replacing it with something else. In this chapter we'll show
   a lot of powerful ways to do this.
*** Inserting the Current Time   
    #+BEGIN_SRC lisp
    (defun insert-current-time ()
      "Insert the current time"
      (interactive "*")
      (insert (current-time-string)))
    #+END_SRC
    
*** User Options And Doctrings
    First we'll define the variable.
    #+BEGIN_SRC lisp
    (defvar insert-time-format "%X"
       "*Format for \\[insert-time] (c.f. format-time-string').")

    (defvar insert-data-format "%x"
       "*Format for \\[insert-date] (c.f. 'format-time-string').")
    #+END_SRC

    - First, each begins with an asterisk(*). A leading asterisk has a special
      meaning in =defvar= doctring. It means that ...(page 54)
    - =\\[command]= ... (page 54)

*** More Asterisk Magic
    #+BEGIN_SRC lisp
    (interactive "*")
    #+END_SRC

    The asterisk, when it is the first character in an =interactive= argument,
    means "abort this function if the current buffer is read-only." It is better
    to detect a read-only buffer before a function begins its work than to let
    it get halfway through then die from a "Buffer is read-only" error.


*** Updating Writestamps    
    The first thing we'll need is a way to run our writestemp-updating code each
    time the file is saved. As we discovered in the section "Hooks" in Chapter2.
    Using =M-x apropos RET hook RET=, we discover four promising hook variable:
    =after-save-hook=, =local-write-file-hooks=, =write-contents-hooks=, and
    =write-file-hooks=.

    #+BEGIN_SRC lisp
    (add-hook 'local-write-file-hooks 'update-writestemps)
    (defun update-writestemps()
       "Find writestemps and replace them with the current time."
       (save-excursion
         (save-restriction
           (save-match-data
             (widen)
             (goto-char (point-min))
             (while (search-forward "WRITESTAMP((" nil t)
               (let ((start (point)))
                  (search-forward "))")
                  (delete-region start (- (point) 2))
                  (goto-char start)
                  (insert-date)))))))
    #+END_SRC

** Chapter 5, Lisp Files
   Up to now, most of the Emacs Lisp we've written has been suitable for
   incusion in your =.emacs= file. The alternative is to put Emacs Lisp code
   into files separated by functionality.

   - Code in =.emacs= is always executed when =Emacs= starts up, even if it is never needed in a
     given session.
   - Code in =.emacs= typically isn't =byte-compiled=. =Byte-compiling= is the process of turning
     Emacs Lisp into a more efficient form that load faster, runs faster, and use less memory.
     This file usually have names ending in =.elc=.

*** Creating a Lisp File
    First, we create =timestamp.el=.
    Don't include the calls to =add-hook= or =make-local-hook= yet. We'll get to those later.
*** Loading the File
    There are many ways to load Lisp files in Emacs: interactively,
    non-interactively, explicitly, implicitly, and with and without
    
*** Finding Lisp Files
    Emacs can load files based on full path names such as =/usr/.../foo.el=,
    but it is usually more convenient to use only a file's base name, =foo.el=,
    and let Emacs find it among the directories in the =loadpath=. The load path
    is simply a list of directories that Emacs searches for files to load. Emacs's
    load path is stored a list of strings in the Lisp variable =load-path=.

    To add a directory to the beginning of =load-path=, use
    #+BEGIN_SRC lisp
    (setq load-path
          (cons "/your/directory/here"
                load-path))

     (setq load-path
           (append load-path ("your/directory/here")))
    #+END_SRC
*** Interactice Loading

    two commands:
    =load-file=, =load-library=
    =M-x load-file RET=

*** Explicit Loading
    #+BEGIN_SRC lisp
    (load "lazy-lock")
    #+END_SRC
    search load-path for =lazy-lock=, =lazy-lock.el=, =lazy-lock.elc=

*** Conditional Loading
    When =n= different pieces of Lisp code want to load a particular file, two
    Emacs Lisp functions, =require= and =provide=, give a way to make sure it
    only gets loaded once instead of =n= times.

    Emacs makes the feature concept explict. Features are named by Lisp symbols,
    declared with =provide=, and requested by =require=.

    Here's how it works. First=, we'll choose a symbol to stand for the feature
    provided by the file =timestamp.el=. Let's use the obvious one, =timestamp=.

    We indicate that =timestamp.el= provides the feature =timestamp= by writing
    #+BEGIN_SRC lisp
    (provide 'timestamp)
    #+END_SRC

    in =timestamp.el=. Normally this appears at the very end of the file.

    Now suppose that somewhere, there's some code that needs the =timestamp=
    functionality. Using =require= like this:
    #+BEGIN_SRC lisp
    (require 'timestamp "timestamp")
    #+END_SRC
    
    also, We can write with:
    #+BEGIN_SRC lisp
    (require 'timestamp)
    #+END_SRC
    
*** Autoloading
    With autoloading, you can arrange to defer loading a file until it's
    needed-that is, until you call one of its functions.

    Here's how it's used:
    #+BEGIN_SRC lisp
    (autoload 'insert-time "timestamp")
    (autoload 'insert-date "timestamp")
    #+END_SRC

    The first time any of the functions =insert-time=, =insert-data= is called,
    Emacs loads =timestamp=. Not only will this cause the inoked function to get
    defined, but it will define the other one as well, so subsequent calls to 
    these functions won't reload =timestamp=
    
*** Compiling the File
    =M-x byte-compile-file RET file.el RET=

*** eval-after-load

    If you'd like to defer the execution of some code until a particular file has been loaded, 
    =eval-after-load= is the way to do it.  For example, suppose you came up with a better
    definition for =dired-sort-toggle= than the one that's in dired. You couldn't simply put
    your version into your =.emacs=, because the first time you edit =dired-sort-toggle-, which
    will wipe out your definition. What you could do instead is:
    #+BEGIN_SRC lisp
    (eval-after-load
      "dired"
      (defun dired-sort-toggle ()
      ...))
    #+END_SRC

    Another use for =eval-after-load= is when you need to refer to a variable, function, or keymap in a
    package. (see page 80)

    To be continue ...

** Chapter 6. Lists
   So far, we've seen lists in a few contexts, but we haven't really explored how they work
   and why they're useful. Since lists are central to Lisp.

** Chapter 7. Minor Mode
*** Defining a Minor Mode
    There are the steps involved in defining a minor mode.
    1. Choose a name.
    2. Define a variable named name-mode. Make it buffer-local. The minor mode
       is "on" in a buffer if that buffer's value of name-mode is non-nul, "off"
       otherwise.
    3. Define a command called name-mode.** 
** Chapter 8. Evaluation and Error Recovery

** Chapter 9. A Major Mode
   Writing  a simple major mode is very much like writing a minor mode, which we covered in Chapter 7.

** Chapter 10. A Comprehensive Example

** Chapter 11. Conclusion
   - Lisp Quick Reference
   - Debugging and Profiling
   - Share your Code

